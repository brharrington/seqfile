
buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'net.sf.proguard:proguard-gradle:5.2.1'
  }
}

plugins {
  id "com.jfrog.bintray" version "1.6"
}

apply plugin: 'java'
apply plugin: 'maven-publish'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = 'io.github.brharrington'
version = '0.11'

repositories {
  jcenter()
}

task sourcesJar(type: Jar, dependsOn:classes) {
  from sourceSets.main.allSource
  classifier 'sources'
  extension 'jar'
}

task javadocJar(type: Jar, dependsOn:javadoc) {
  from javadoc.destinationDir
  classifier 'javadoc'
  extension 'jar'
}

task proguard(type: proguard.gradle.ProGuardTask) {

  def javaHome = System.properties['java.home']

  dontwarn

  target           '1.8'
  optimizations    '!class/unboxing/enum'

  injars           "build/libs/seqfile-${project.version}.jar"
  injars           configurations.runtime
  outjars          'build/libs/seqfile-proguard.jar', filter: '!**.java,!**.html,!**.dtd,!javax/**'
  libraryjars      "${javaHome}/lib/rt.jar"

  repackageclasses 'io.github.brharrington.seqfile.impl'

  keep 'public class io.github.brharrington.seqfile.** {  \
    public protected private *; \
  }'

  keep 'class org.apache.hadoop.io.** { \
    public protected private *; \
  }'

  keepclassmembers 'enum * { \
    public static **[] values(); \
    public static ** valueOf(java.lang.String); \
  }'
}

task swapJar(dependsOn:[jar, proguard]) << {
  println("Replacing original jar with uber jar.")
  file("build/libs/seqfile-${project.version}.jar")
    .renameTo(file("build/libs/seqfile-${project.version}-original.jar"))
  file("build/libs/seqfile-proguard.jar")
    .renameTo(file("build/libs/seqfile-${project.version}.jar"))
}

build.dependsOn(['swapJar'])

artifacts {
  archives sourcesJar
  archives javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar

      pom.withXml {
        asNode().dependencies.replaceNode { new Node(null, "dependencies") }
      }
    }
  }
}

dependencies {
  compile('org.apache.hadoop:hadoop-common:2.5.1') {
    exclude group: 'commons-logging'
    exclude group: 'commons-httpclient'
    exclude group: 'commons-el'
    exclude group: 'commons-io'
    exclude group: 'commons-cli'
    exclude group: 'commons-net'
    exclude group: 'commons-codec'
    exclude group: 'org.mortbay.jetty'
    exclude group: 'tomcat'
    exclude group: 'javax.servlet.jsp'
    exclude group: 'com.sun.jersey'
    exclude group: 'net.java.dev.jets3t'
    exclude group: 'org.slf4j'
    exclude group: 'log4j'
    exclude group: 'org.codehaus.jackson'
    exclude group: 'com.google.protobuf'
    exclude group: 'com.jcraft'
    exclude group: 'org.apache.zookeeper'
    exclude group: 'org.apache.commons'
    exclude group: 'xmlenc'
    exclude group: 'org.apache.hadoop', module: 'hadoop-auth'
  }
  testCompile 'junit:junit:4.12'
}

bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')

  publications = ['mavenJava']
  dryRun = true
  publish = true
  pkg {
    repo = 'maven'
    name = project.name
    desc = 'Read/write sequence files.'
    websiteUrl = 'https://github.com/brharrington/seqfile'
    issueTrackerUrl = 'https://github.com/brharrington/seqfile/issues'
    vcsUrl = 'https://github.com/brharrington/seqfile.git'
    licenses = ['Apache-2.0']
    labels = []
    publicDownloadNumbers = true
    attributes= [:]
    version {
      name = project.version
      vcsTag = project.version
      attributes = [:]
    }
  }
}
